#!/bin/bash

# üöÄ Skrypt uruchamiajƒÖcy NextReviews - Frontend + Backend
# Autor: NextReviews Team
# Opis: Uruchamia jednocze≈õnie React frontend i FastAPI backend

echo "üéâ Uruchamianie aplikacji NextReviews..."
echo "=================================="

# Kolory dla lepszej czytelno≈õci
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funkcja do sprawdzania czy port jest zajƒôty
check_port() {
    if lsof -Pi :$1 -sTCP:LISTEN -t >/dev/null ; then
        echo -e "${RED}‚ùå Port $1 jest ju≈º zajƒôty!${NC}"
        echo -e "${YELLOW}üí° Zatrzymaj proces u≈ºywajƒÖcy portu $1 lub zmie≈Ñ port w konfiguracji${NC}"
        return 1
    else
        echo -e "${GREEN}‚úÖ Port $1 jest wolny${NC}"
        return 0
    fi
}

# Funkcja do sprawdzania czy program jest zainstalowany
check_installed() {
    if command -v $1 &> /dev/null; then
        echo -e "${GREEN}‚úÖ $1 jest zainstalowany${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $1 nie jest zainstalowany${NC}"
        return 1
    fi
}

# Sprawd≈∫ wymagania
echo -e "${BLUE}üîç Sprawdzanie wymaga≈Ñ...${NC}"
echo ""

# Sprawd≈∫ Node.js
if ! check_installed "node"; then
    echo -e "${RED}‚ùå Node.js nie jest zainstalowany!${NC}"
    echo -e "${YELLOW}üí° Zainstaluj Node.js z: https://nodejs.org/${NC}"
    exit 1
fi

# Sprawd≈∫ npm
if ! check_installed "npm"; then
    echo -e "${RED}‚ùå npm nie jest zainstalowany!${NC}"
    echo -e "${YELLOW}üí° npm powinien byƒá do≈ÇƒÖczony do Node.js${NC}"
    exit 1
fi

# Sprawd≈∫ Python
if ! check_installed "python3"; then
    echo -e "${RED}‚ùå Python3 nie jest zainstalowany!${NC}"
    echo -e "${YELLOW}üí° Zainstaluj Python3 z: https://python.org/${NC}"
    exit 1
fi

# Sprawd≈∫ pip
if ! check_installed "pip3"; then
    echo -e "${RED}‚ùå pip3 nie jest zainstalowany!${NC}"
    echo -e "${YELLOW}üí° Zainstaluj pip3${NC}"
    exit 1
fi

echo ""

# Sprawd≈∫ porty
echo -e "${BLUE}üîç Sprawdzanie port√≥w...${NC}"
if ! check_port 3000; then
    echo -e "${YELLOW}üí° Frontend bƒôdzie pr√≥bowa≈Ç u≈ºyƒá portu 3000${NC}"
fi

if ! check_port 8000; then
    echo -e "${YELLOW}üí° Backend bƒôdzie pr√≥bowa≈Ç u≈ºyƒá portu 8000${NC}"
fi

echo ""

# Sprawd≈∫ czy foldery istniejƒÖ
echo -e "${BLUE}üîç Sprawdzanie struktury projektu...${NC}"
if [ ! -d "frontend" ]; then
    echo -e "${RED}‚ùå Folder 'frontend' nie istnieje!${NC}"
    exit 1
fi

if [ ! -f "backend/backend_main.py" ]; then
    echo -e "${RED}‚ùå Plik 'backend_main.py' nie istnieje!${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Struktura projektu jest poprawna${NC}"
echo ""

# Instalacja zale≈ºno≈õci frontend
echo -e "${BLUE}üì¶ Instalacja zale≈ºno≈õci frontend...${NC}"
cd frontend

if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}üì• Instalujƒô zale≈ºno≈õci npm...${NC}"
    npm install
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå B≈ÇƒÖd instalacji zale≈ºno≈õci frontend!${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}‚úÖ Zale≈ºno≈õci frontend ju≈º zainstalowane${NC}"
fi

cd ..
cd backend

# Instalacja zale≈ºno≈õci backend
echo -e "${BLUE}üì¶ Instalacja zale≈ºno≈õci backend...${NC}"
if [ ! -f "requirements.txt" ]; then
    echo -e "${RED}‚ùå Plik 'requirements.txt' nie istnieje!${NC}"
    exit 1
fi

echo -e "${YELLOW}üì• Instalujƒô zale≈ºno≈õci Python...${NC}"
pip3 install -r requirements.txt
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå B≈ÇƒÖd instalacji zale≈ºno≈õci backend!${NC}"
    exit 1
fi

echo ""

# Funkcja do zatrzymania proces√≥w
cleanup() {
    echo ""
    echo -e "${YELLOW}üõë Zatrzymywanie aplikacji...${NC}"
    if [ ! -z "$FRONTEND_PID" ]; then
        kill $FRONTEND_PID 2>/dev/null
        echo -e "${GREEN}‚úÖ Frontend zatrzymany${NC}"
    fi
    if [ ! -z "$BACKEND_PID" ]; then
        kill $BACKEND_PID 2>/dev/null
        echo -e "${GREEN}‚úÖ Backend zatrzymany${NC}"
    fi
    echo -e "${BLUE}üëã Do widzenia!${NC}"
    exit 0
}

# Ustaw trap dla Ctrl+C
trap cleanup SIGINT SIGTERM

echo -e "${GREEN}üöÄ Uruchamianie aplikacji...${NC}"
echo ""

# Uruchom backend w tle
echo -e "${BLUE}üîß Uruchamianie FastAPI backend (port 8000)...${NC}"
python3 backend_main.py &
BACKEND_PID=$!

# Poczekaj chwilƒô na uruchomienie backend
sleep 3

# Sprawd≈∫ czy backend siƒô uruchomi≈Ç
if ! kill -0 $BACKEND_PID 2>/dev/null; then
    echo -e "${RED}‚ùå Backend nie uruchomi≈Ç siƒô poprawnie!${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Backend uruchomiony (PID: $BACKEND_PID)${NC}"

cd ..

# Uruchom frontend w tle
echo -e "${BLUE}‚öõÔ∏è  Uruchamianie React frontend (port 3000)...${NC}"
cd frontend
npm run dev &
FRONTEND_PID=$!
cd ..

# Poczekaj chwilƒô na uruchomienie frontend
sleep 3

# Sprawd≈∫ czy frontend siƒô uruchomi≈Ç
if ! kill -0 $FRONTEND_PID 2>/dev/null; then
    echo -e "${RED}‚ùå Frontend nie uruchomi≈Ç siƒô poprawnie!${NC}"
    cleanup
    exit 1
fi

echo -e "${GREEN}‚úÖ Frontend uruchomiony (PID: $FRONTEND_PID)${NC}"

echo ""
echo -e "${GREEN}üéâ Aplikacja NextReviews uruchomiona pomy≈õlnie!${NC}"
echo "=================================="
echo -e "${BLUE}üì± Frontend:${NC} http://localhost:3000"
echo -e "${BLUE}üîß Backend:${NC}  http://localhost:8000"
echo -e "${BLUE}üìö API Docs:${NC} http://localhost:8000/docs"
echo ""
echo -e "${YELLOW}üí° Naci≈õnij Ctrl+C aby zatrzymaƒá aplikacjƒô${NC}"
echo ""

# Wy≈õwietl logi w czasie rzeczywistym
echo -e "${BLUE}üìã Logi aplikacji:${NC}"
echo "=================================="

# Funkcja do wy≈õwietlania log√≥w
show_logs() {
    while true; do
        sleep 1
        # Sprawd≈∫ czy procesy nadal dzia≈ÇajƒÖ
        if ! kill -0 $BACKEND_PID 2>/dev/null; then
            echo -e "${RED}‚ùå Backend zatrzyma≈Ç siƒô nieoczekiwanie!${NC}"
            cleanup
            exit 1
        fi
        if ! kill -0 $FRONTEND_PID 2>/dev/null; then
            echo -e "${RED}‚ùå Frontend zatrzyma≈Ç siƒô nieoczekiwanie!${NC}"
            cleanup
            exit 1
        fi
    done
}

# Uruchom monitorowanie log√≥w
show_logs
